{"name": "test_search_with_smail_in_to_field", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: ChromeDriver only supports characters in the BMP\n  (Session info: chrome=138.0.7204.102)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7a9cee925+77845]\n\tGetHandleVerifier [0x0x7ff7a9cee980+77936]\n\t(No symbol) [0x0x7ff7a9aa9cda]\n\t(No symbol) [0x0x7ff7a9b445fd]\n\t(No symbol) [0x0x7ff7a9af9ce7]\n\t(No symbol) [0x0x7ff7a9af7aee]\n\t(No symbol) [0x0x7ff7a9b288ca]\n\t(No symbol) [0x0x7ff7a9af2f76]\n\t(No symbol) [0x0x7ff7a9b28ae0]\n\t(No symbol) [0x0x7ff7a9b50b07]\n\t(No symbol) [0x0x7ff7a9b286a3]\n\t(No symbol) [0x0x7ff7a9af1791]\n\t(No symbol) [0x0x7ff7a9af2523]\n\tGetHandleVerifier [0x0x7ff7a9fc683d+3059501]\n\tGetHandleVerifier [0x0x7ff7a9fc0bfd+3035885]\n\tGetHandleVerifier [0x0x7ff7a9fe03f0+3164896]\n\tGetHandleVerifier [0x0x7ff7a9d08c2e+185118]\n\tGetHandleVerifier [0x0x7ff7a9d1053f+216111]\n\tGetHandleVerifier [0x0x7ff7a9cf72d4+113092]\n\tGetHandleVerifier [0x0x7ff7a9cf7489+113529]\n\tGetHandleVerifier [0x0x7ff7a9cde288+10616]\n\tBaseThreadInitThunk [0x0x7ffbfb32e8d7+23]\n\tRtlUserThreadStart [0x0x7ffbfd23c34c+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2df214a026f38d8c7dd46803e70f0424\")>\n\n    def test_search_with_smail_in_to_field(driver):\n        page = MainPage(driver)\n        page.open()\n        smail = \"ðŸ™ƒ\"\n>       page.set_to(smail)\n\ntest\\test_ui.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\MainPage.py:22: in set_to\n    elem.send_keys(value)\nC:\\Users\\ekate\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:305: in send_keys\n    self._execute(\nC:\\Users\\ekate\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\ekate\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026465D37CB0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: ChromeDriver only supports chara...ff7a9cde288+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffbfb32e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffbfd23c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: ChromeDriver only supports characters in the BMP\nE         (Session info: chrome=138.0.7204.102)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7a9cee925+77845]\nE       \tGetHandleVerifier [0x0x7ff7a9cee980+77936]\nE       \t(No symbol) [0x0x7ff7a9aa9cda]\nE       \t(No symbol) [0x0x7ff7a9b445fd]\nE       \t(No symbol) [0x0x7ff7a9af9ce7]\nE       \t(No symbol) [0x0x7ff7a9af7aee]\nE       \t(No symbol) [0x0x7ff7a9b288ca]\nE       \t(No symbol) [0x0x7ff7a9af2f76]\nE       \t(No symbol) [0x0x7ff7a9b28ae0]\nE       \t(No symbol) [0x0x7ff7a9b50b07]\nE       \t(No symbol) [0x0x7ff7a9b286a3]\nE       \t(No symbol) [0x0x7ff7a9af1791]\nE       \t(No symbol) [0x0x7ff7a9af2523]\nE       \tGetHandleVerifier [0x0x7ff7a9fc683d+3059501]\nE       \tGetHandleVerifier [0x0x7ff7a9fc0bfd+3035885]\nE       \tGetHandleVerifier [0x0x7ff7a9fe03f0+3164896]\nE       \tGetHandleVerifier [0x0x7ff7a9d08c2e+185118]\nE       \tGetHandleVerifier [0x0x7ff7a9d1053f+216111]\nE       \tGetHandleVerifier [0x0x7ff7a9cf72d4+113092]\nE       \tGetHandleVerifier [0x0x7ff7a9cf7489+113529]\nE       \tGetHandleVerifier [0x0x7ff7a9cde288+10616]\nE       \tBaseThreadInitThunk [0x0x7ffbfb32e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffbfd23c34c+44]\n\nC:\\Users\\ekate\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "start": 1752855030886, "stop": 1752855045843, "uuid": "d08eb512-891b-465e-9e04-5c8bd62680dd", "historyId": "3d337e2cd72174b3945db4dbc239654c", "testCaseId": "3d337e2cd72174b3945db4dbc239654c", "fullName": "test.test_ui#test_search_with_smail_in_to_field", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_ui"}, {"name": "host", "value": "KateNoyt"}, {"name": "thread", "value": "10020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_ui"}]}